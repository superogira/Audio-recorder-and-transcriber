import pyaudio
import wave
from pydub import AudioSegment, effects
import numpy as np
import os
import time
import threading
import queue
from datetime import datetime
import requests
import json
import random
import msvcrt
import azure.cognitiveservices.speech as speechsdk
from google.cloud import speech
from ibm_watson import SpeechToTextV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator


# ‡∏™‡∏£‡πâ‡∏≤‡∏á Event ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå amplitude
print_event = threading.Event()
print_event.set()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ

# === ‡πÇ‡∏´‡∏•‡∏î config ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ===
CONFIG_FILE = "recorder_transcriber-config.json"
if not os.path.exists(CONFIG_FILE):
    raise FileNotFoundError("‡πÑ‡∏°‡πà‡∏û‡∏ö recorder_transcriber-config.json")

with open(CONFIG_FILE, "r") as f:
    config = json.load(f)

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AssemblyAI API (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ===
ASSEMBLYAI_API_KEY = config.get("assemblyai_api_key", "") # Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
ASSEMBLYAI_UPLOAD_URL = "https://api.assemblyai.com/v2/upload"
ASSEMBLYAI_TRANSCRIPT_URL = "https://api.assemblyai.com/v2/transcript"

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Azure Speech API ===
SPEECH_KEY = config.get("azure_speech_key","") # Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
SERVICE_REGION = config.get("azure_service_region","") # Location ‡∏´‡∏£‡∏∑‡∏≠ Region ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Resource
LANGUAGE = config.get("azure_language","") # ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Cloud API ===
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = config.get("google_credentials","") # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Credentials
LANGUAGE_CODE = config.get("google_language_code","") # ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Speechmatics Speech-to-Text ===
SPEECHMATICS_API_KEY = config.get("speechmatics_api_key", "") # API KEY
SPEECHMATICS_LANGUAGE_CODE = config.get("speechmatics_language", "") # ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
SPEECHMATICS_URL = "https://asr.api.speechmatics.com/v2"

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IBM Cloud Speech to Text (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ===
IBM_API_KEY = config.get("ibm_api_key", "") # API KEY
IBM_LANGUAGE_CODE = config.get("ibm_language_code", "") # ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
IBM_URL = config.get("ibm_url", "")

# ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå recorder_config.json
FREQUENCY = config.get("frequency","") # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏≤
STATION = config.get("station","") # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≤‡∏ô ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
THRESHOLD = config.get("threshold", 500) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
RECORD_SECONDS = config.get("record_length",60) # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ
SILENCE_LIMIT = config.get("silence_limit", 1) # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ * ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
MIN_DURATION_SEC = config.get("min_duration_sec", 3) # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ * ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
AUDIO_PRE_PROCESSING = config.get("audio_pre_processing", False) # ‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Filter, Normalize)
AUDIO_FILTER = config.get("audio_filter", False) # ‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î ‡∏£‡∏∞‡∏ö‡∏ö Audio Filter
AUDIO_HIGH_PASS_FILTER = config.get("audio_high_pass_filter", 300) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio High Pass Filter (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
AUDIO_LOW_PASS_FILTER = config.get("audio_low_pass_filter", 8000) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio Low Pass Filter (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
AUDIO_NORMALIZE = config.get("audio_normalize", False) # ‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤ ‡πÜ ‡∏Å‡∏±‡∏ô
SAVE_FOLDER = config.get("save_folder","audio_files") # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
LOG_FILE = config.get("log_file","system.log") # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Log
NUM_WORKERS = config.get("num_workers", 2) # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô worker ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô 2 ‡∏´‡∏£‡∏∑‡∏≠ 4)
UPLOAD_ENABLED = config.get("upload", True) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
UPLOAD_URL = config.get("upload_url", "https://e25wop.com/ham_radio_recorder_transcriber/upload.php") # URL ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
ALTERNATE_ENGINES = config.get("alternate_engines", ["azure", "google"]) # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô alternate mode
RANDOM_ENGINES = config.get("random_engines", ["azure", "google"]) # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô random mode
TRANSCRIBE_ENGINE_MODE = config.get("transcribe_engine_mode", "azure") # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: "assemblyai", "azure", "google", "ibm", "speechmatics", "random, "alternate"

last_engine_index = -1

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö ===
CHUNK = 1024
RATE = 16000

os.makedirs(SAVE_FOLDER, exist_ok=True)
audio_queue = queue.Queue()

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
def log(msg):
    now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    if print_event.is_set():
        print(f"{now} {msg}")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{now} {msg}\n")

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Config ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
def control_thread():
    global FREQUENCY
    global THRESHOLD
    global SILENCE_LIMIT
    global UPLOAD_ENABLED
    global TRANSCRIBE_ENGINE_MODE
    global AUDIO_PRE_PROCESSING
    """
    ‡∏£‡∏±‡∏ô‡∏Ç‡∏ô‡∏≤‡∏ö‡∏Ç‡πâ‡∏≤‡∏á main loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å stdin
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå F ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô FREQUENCY
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå T ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô THRESHOLD
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå S ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SILENCE_LIMIT
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå U ‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î UPLOAD_ENABLED
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå E ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô TRANSCRIBE_ENGINE_MODE
    - ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå A ‡∏à‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î AUDIO_PRE_PROCESSING
    """
    while True:
        if msvcrt.kbhit():
            key = msvcrt.getch().upper()
            if key == b'F':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà FREQUENCY ‡πÉ‡∏´‡∏°‡πà
                old = FREQUENCY
                new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô FREQUENCY ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ {old}  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ FREQUENCY ‡πÉ‡∏´‡∏°‡πà: ").strip()
                # ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ Print ‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠
                print_event.set()
                if new :
                    FREQUENCY = new
                    log(f"üîÑ (Config) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô FREQUENCY ‡∏à‡∏≤‡∏Å '{old}' ‡πÄ‡∏õ‡πá‡∏ô '{new}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

            elif key == b'T':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà THRESHOLD ‡πÉ‡∏´‡∏°‡πà
                old = THRESHOLD
                new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô THRESHOLD ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ {old}  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ THRESHOLD ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç): ").strip()
                print_event.set()
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô
                if new.isdigit():
                    THRESHOLD = int(new)
                    log(f"üîÑ (Config) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô THRESHOLD ‡∏à‡∏≤‡∏Å '{old}' ‡πÄ‡∏õ‡πá‡∏ô '{new}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                else:
                    print_event.set()
                    log(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: `{new}` ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô")
            elif key == b'S':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà SILENCE_LIMIT ‡πÉ‡∏´‡∏°‡πà
                old = SILENCE_LIMIT
                new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô SILENCE_LIMIT ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ {old}  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ SILENCE_LIMIT ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç): ").strip()
                print_event.set()
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô
                if new.isdigit():
                    SILENCE_LIMIT = int(new)
                    log(f"üîÑ (Config) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SILENCE_LIMIT ‡∏à‡∏≤‡∏Å '{old}' ‡πÄ‡∏õ‡πá‡∏ô '{new}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                else:
                    log(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: `{new}` ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô")
            elif key == b'U':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ UPLOAD
                # text = "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" if UPLOAD_ENABLED else "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
                # new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô UPLOAD {text}  ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå 0 (‡∏õ‡∏¥‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ 1 (‡πÄ‡∏õ‡∏¥‡∏î): ").strip()
                # print_event.set()
                if UPLOAD_ENABLED:
                    UPLOAD_ENABLED = False
                else:
                    UPLOAD_ENABLED = True
                print_event.set()
                log(f"üîÑ (Config) ‡∏£‡∏∞‡∏ö‡∏ö UPLOAD ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if UPLOAD_ENABLED else '‚ùå ‡∏õ‡∏¥‡∏î'} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                """
                if new in ("0", "1"):
                    UPLOAD_ENABLED = (new == "1")
                    log(f"üîÑ (Config) ‡∏£‡∏∞‡∏ö‡∏ö UPLOAD ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if UPLOAD_ENABLED else '‚ùå ‡∏õ‡∏¥‡∏î'} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                else:
                    log(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: `{new}` ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                """
            elif key == b'E':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                old = TRANSCRIBE_ENGINE_MODE
                new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á {old} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î (assemblyai, azure, google, ibm, speechmatics, random, alternate): ").strip()
                print_event.set()
                if new in ("azure", "google", "ibm", "speechmatics", "random", "alternate"):
                    TRANSCRIBE_ENGINE_MODE = new
                    log(f"üîÑ (Config) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô TRANSCRIBE_ENGINE ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å '{old}' ‡πÄ‡∏õ‡πá‡∏ô '{new}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                else:
                    log(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: `{new}` ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå assemblyai, azure, google, ibm, speechmatics, random ‡∏´‡∏£‡∏∑‡∏≠ alternate ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            elif key == b'A':
                # ‡∏´‡∏¢‡∏∏‡∏î Print
                print_event.clear()
                # ‡∏Ç‡∏∂‡πâ‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Audio Pre Process
                # text = "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" if AUDIO_PRE_PROCESSING else "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
                # new = input(f"\n‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô Audio Pre-processing {text}  ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå 0 (‡∏õ‡∏¥‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ 1 (‡πÄ‡∏õ‡∏¥‡∏î): ").strip()
                #print_event.set()
                if AUDIO_PRE_PROCESSING:
                    AUDIO_PRE_PROCESSING = False
                else:
                    AUDIO_PRE_PROCESSING = True
                print_event.set()
                log(f"üîÑ (Config) ‡∏£‡∏∞‡∏ö‡∏ö Audio Pre-processing ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if AUDIO_PRE_PROCESSING else '‚ùå ‡∏õ‡∏¥‡∏î'} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                """
                if new in ("0", "1"):
                    AUDIO_PRE_PROCESSING = (new == "1")
                    log(f"üîÑ (Config) ‡∏£‡∏∞‡∏ö‡∏ö Audio Pre-processing ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {'‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î' if AUDIO_PRE_PROCESSING else '‚ùå ‡∏õ‡∏¥‡∏î'} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                else:
                    log(f"‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: `{new}` ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                """
        time.sleep(0.1)
        # ‡∏≠‡∏≤‡∏à‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏ä‡πà‡∏ô 'S' ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô STATION ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
def record_until_silent():
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16,
                    channels=1,
                    rate=RATE,
                    input=True,
                    frames_per_buffer=CHUNK)

    log(f"üì° ‡∏£‡∏≠‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ({FREQUENCY}) ...")
    frames = []
    recording = False
    silence_chunks = 0 # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks ‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

    if TRANSCRIBE_ENGINE_MODE == "google":
        max_record_sec = 59  # ‡∏Ç‡∏≠‡∏á Google Cloud API ‡∏´‡∏≤‡∏Å‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô 59
    else:
        max_record_sec = RECORD_SECONDS

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    # ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ max_chunks * (CHUNK / RATE) <= max_record_sec
    max_chunks = int(RATE / CHUNK * max_record_sec)

    while True:
        data = stream.read(CHUNK, exception_on_overflow=False)
        audio_data = np.frombuffer(data, dtype=np.int16)
        amplitude = np.abs(audio_data).mean()

        if print_event.is_set():
            print(f"Ô∏èüéöÔ∏è Amplitude ({FREQUENCY}) : {amplitude:.2f}", end='\r')
        if not recording:
            if amplitude > THRESHOLD:
                log("üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î...")
                recording = True
                frames.append(data)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° chunk ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                silence_chunks = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤ ‡∏Å‡πá‡∏ß‡∏ô‡∏£‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        else:  # recording is True (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á)
            frames.append(data)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô frames

            if amplitude <= THRESHOLD:  # ‡∏ñ‡πâ‡∏≤ chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤
                silence_chunks += 1
            else:  # ‡∏ñ‡πâ‡∏≤ chunk ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á
                silence_chunks = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks ‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å chunk
            # 1. ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏û‡∏≠
            stopped_by_silence = silence_chunks > int(RATE / CHUNK * SILENCE_LIMIT)

            # 2. ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            # ‡πÉ‡∏ä‡πâ >= max_chunks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô frames ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_chunks
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô max_chunks * (CHUNK / RATE) ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ <= max_record_sec
            stopped_by_length = len(frames) >= max_chunks

            if stopped_by_silence or stopped_by_length:
                if stopped_by_length and not stopped_by_silence:
                    log(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î (‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_record_sec:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
                elif stopped_by_silence and not stopped_by_length:
                    log(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î (‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö {SILENCE_LIMIT} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
                else:  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
                    log(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏î (‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)")
                break

    stream.stop_stream()
    stream.close()
    p.terminate()

    duration = len(frames) * CHUNK / RATE
    if duration < MIN_DURATION_SEC:
        log(f"‚õî ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚Äî ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        return None

    filename = datetime.now().strftime("%Y%m%d_%H%M%S") + ".wav"
    filepath = os.path.join(SAVE_FOLDER, filename)
    wf = wave.open(filepath, 'wb')
    wf.setnchannels(1)
    wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()
    log(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ({duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) : {filepath}")
    return filepath, duration

# ‡∏£‡∏∞‡∏ö‡∏ö Pre-processing ‡∏ï‡∏±‡∏î noise, normalize volume, ‡πÅ‡∏•‡∏∞ apply high-pass filter
def preprocess_audio(in_path):
    """
    1) ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    2) ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô mono
    3) ‡∏ï‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ï‡πà‡∏≥ (<300 Hz) ‡∏Å‡∏±‡∏ö‡∏™‡∏π‡∏á (>8000 Hz)
    4) Normalize ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    //5) (optional) ‡∏ó‡∏≥ noise reduction
    6) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß return path
    """
    # 1) ‡πÇ‡∏´‡∏•‡∏î
    sound = AudioSegment.from_file(in_path, format="wav")
    # 2) mono
    sound = sound.set_channels(1)
    # 3) high-pass + low-pass
    if AUDIO_FILTER:
        sound = sound.high_pass_filter(AUDIO_HIGH_PASS_FILTER).low_pass_filter(AUDIO_LOW_PASS_FILTER)
    # 4) normalize
    if AUDIO_NORMALIZE:
        sound = effects.normalize(sound)

    # 6) export
    out_path = in_path.replace(".wav", "_processed.wav")
    sound.export(out_path, format="wav")
    log("üéØ Pre-processing ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    return out_path

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ AssemblyAI
def transcribe_audio_assemblyai(filepath, duration, engine_used):
    headers = {
        "authorization": ASSEMBLYAI_API_KEY,
        "content-type": "application/json"
    }
    log(f"üß† ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ AssemblyAI: {filepath}")

    # 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ upload_url
    with open(filepath, "rb") as f:
        upload_resp = requests.post(
            ASSEMBLYAI_UPLOAD_URL,
            headers={"authorization": ASSEMBLYAI_API_KEY},
            data=f
        )
    upload_resp.raise_for_status()
    upload_url = upload_resp.json()["upload_url"]

    # 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á transcript job
    json_payload = {
        "audio_url": upload_url,
        # ... ‡πÉ‡∏™‡πà options ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô speaker_labels, punctuate ...
    }
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡πá‡∏ö response ‡∏Å‡πà‡∏≠‡∏ô raise
    transcript_resp = requests.post(
        ASSEMBLYAI_TRANSCRIPT_URL,
        headers=headers,
        json=json_payload
    )
    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÜ
    log(f"üîç AssemblyAI transcript request returned { transcript_resp.status_code }: {transcript_resp.text}")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡πá return
    if transcript_resp.status_code != 200:
        return

    job_resp = requests.post(
        ASSEMBLYAI_TRANSCRIPT_URL,
        headers=headers,
        json=json_payload
    )

    job_resp.raise_for_status()
    job_id = job_resp.json()["id"]
    log(f"üîç AssemblyAI job created: {job_id}")

    # 3) Polling ‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    status = ""
    while status not in ("completed", "error"):
        time.sleep(5)
        status_resp = requests.get(
            f"{ASSEMBLYAI_TRANSCRIPT_URL}/{job_id}",
            headers=headers
        )
        status_resp.raise_for_status()
        j = status_resp.json()
        status = j["status"]
        log(f"üîÑ AssemblyAI job {job_id} status: {status}")

    # 4) ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if status == "completed":
        text = j.get("text", "").strip()
        if text:
            log(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (AssemblyAI): {text[:50]}‚Ä¶")
        else:
            log("‚ùå AssemblyAI: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
            text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"
    else:
        log(f"‚ùå AssemblyAI job error: {j.get('error', 'unknown')}")
        text = "[‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î]"

    # 5) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    with open(filepath.replace(".wav", ".txt"), "w", encoding="utf-8") as ftxt:
        ftxt.write(text)
    upload_audio_and_text(filepath, text, duration, engine_used)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Azure
def transcribe_audio_azure(filepath, duration, engine_used):
    speech_config = speechsdk.SpeechConfig(subscription=SPEECH_KEY, region=SERVICE_REGION)
    speech_config.speech_recognition_language = LANGUAGE
    audio_config = speechsdk.audio.AudioConfig(filename=filepath)
    recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)

    log(f"üß† ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ Azure: {filepath}")
    result = recognizer.recognize_once()

    if result.reason == speechsdk.ResultReason.RecognizedSpeech:
        text = result.text.strip()
        log(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Azure): {text}")
    elif result.reason == speechsdk.ResultReason.NoMatch:
        text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"
        log("‚ùå Azure: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
    else:
        text = "[‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î]"
        log(f"üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: {result.reason}")

    with open(filepath.replace(".wav", ".txt"), "w", encoding="utf-8") as f:
        f.write(text)

    upload_audio_and_text(filepath, text, duration, engine_used)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Google Cloud
def transcribe_audio_google(filepath, duration, engine_used):
    client = speech.SpeechClient()
    log(f"üß† ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ Google: {filepath}")

    with open(filepath, "rb") as audio_file:
        content = audio_file.read()

    audio = speech.RecognitionAudio(content=content)
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        sample_rate_hertz=RATE,
        language_code=LANGUAGE_CODE,
        audio_channel_count=1,
        enable_automatic_punctuation=True
    )

    response = client.recognize(config=config, audio=audio)

    if not response.results:
        log("‚ùå Google: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"
    else:
        text = response.results[0].alternatives[0].transcript
        log(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Google): {text}")

    with open(filepath.replace(".wav", ".txt"), "w", encoding="utf-8") as f:
        f.write(text)

    upload_audio_and_text(filepath, text, duration, engine_used)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ IBM Cloud
def transcribe_audio_ibm(filepath, duration, engine_used):
    log(f"üß† ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ IBM Watson: {filepath}")
    authenticator = IAMAuthenticator(IBM_API_KEY)
    speech_to_text = SpeechToTextV1(authenticator=authenticator)
    speech_to_text.set_service_url(IBM_URL)

    with open(filepath, 'rb') as audio_file:
        response = speech_to_text.recognize(
            audio=audio_file,
            content_type='audio/wav',
            model=IBM_LANGUAGE_CODE,
            timestamps=False,
            word_confidence=False
        ).get_result()

    results = response.get("results", [])
    if results and "alternatives" in results[0]:
        text = results[0]["alternatives"][0]["transcript"]
        log(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (IBM Watson): {text}")
    else:
        text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"
        log("‚ùå IBM Watson: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")

    with open(filepath.replace(".wav", ".txt"), "w", encoding="utf-8") as f:
        f.write(text)

    upload_audio_and_text(filepath, text, duration, engine_used)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Speechmatics
def transcribe_audio_speechmatics(filepath, duration, engine_used):
    log(f"üß† ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ Speechmatics: {filepath}")
    headers = {
        'Authorization': f'Bearer {SPEECHMATICS_API_KEY}',
        'Accept': 'application/json'
    }

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° JSON ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ v2
    config_payload = {
        "type": "transcription",
        "transcription_config": {
            "language": f"{SPEECHMATICS_LANGUAGE_CODE}"
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô operating_point, diarization ‡∏Ø‡∏•‡∏Ø ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        }
    }

    files = {
        'data_file': open(filepath, 'rb')
    }
    data = {
        'config': json.dumps(config_payload)
    }

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å POST jobs
    resp = requests.post(
        f"{SPEECHMATICS_URL}/jobs/",
        headers=headers,
        files=files,
        data=data
    )

    # 2xx ‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏≠ success
    if not (200 <= resp.status_code < 300):
        err = resp.json() if resp.headers.get("Content-Type", "").startswith("application/json") else resp.text
        log(f"‚ùå Speechmatics error {resp.status_code}: {err}")
        return

    job = resp.json()
    # log(f"üîç Speechmatics response on job creation: {job}")

    # ‡∏î‡∏∂‡∏á job ID
    job_id = job.get("id") or job.get("job",{}).get("id")
    if not job_id:
        log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö job ID ‡πÉ‡∏ô response")
        return

    # Poll status ‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    status = None
    while status != 'done':
        time.sleep(5)
        st = requests.get(f"{SPEECHMATICS_URL}/jobs/{job_id}", headers=headers)
        st.raise_for_status()
        resp_status = st.json()
        if 'status' in resp_status:
            status = resp_status['status']
        else:
            # ‡∏ñ‡πâ‡∏≤ status ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô key 'job'
            status = resp_status.get('job', {}).get('status')

        if status is None:
            log(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö status ‡πÉ‡∏ô response ‡∏Ç‡∏≠‡∏á Speechmatics: {resp_status}")
            break

        # log(f"üîÑ Speechmatics job {job_id} status: {status}")
        if status in ('failed', 'expired'):
            log(f"‚ùå Speechmatics job {job_id} failed.")
            text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"
            break
    else:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î transcript
        txt_resp = requests.get(f"{SPEECHMATICS_URL}/jobs/{job_id}/transcript?format=txt", headers=headers)
        txt_resp.raise_for_status()
        text = txt_resp.content.decode('utf-8').strip()

        # ‡∏´‡∏•‡∏±‡∏á decode ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ text
        if text.strip():
            log(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Speechmatics): {text}")
        else:
            log("‚ùå Speechmatics: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
            text = "[‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ]"

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    with open(filepath.replace(".wav", ".txt"), "w", encoding="utf-8") as ftxt:
        ftxt.write(text)
    upload_audio_and_text(filepath, text, duration, engine_used)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def upload_audio_and_text(audio_path, transcript, duration, engine_used):
    if not UPLOAD_ENABLED:
        log("‚ùå‚òÅÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Upload ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ Upload ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return

    source_name = get_source_name(engine_used)
    files = {'audio': open(audio_path, 'rb')}
    data = {
        'transcript': transcript,
        'filename': os.path.basename(audio_path),
        'source': source_name,
        'frequency': FREQUENCY,
        'station': STATION,
        'duration': str(round(duration, 2))
    }
    try:
        res = requests.post(UPLOAD_URL, files=files, data=data)
        if res.status_code == 200:
            log(f"üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ: filename={data['filename']}, transcript={transcript[:30]}...")
            log("‚òÅÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            log(f"‚ùå Upload error: {res.status_code}")
    except Exception as e:
        log(f"‚ùå Upload exception: {e}")

def worker(worker_id):
    while True:
        task = audio_queue.get()
        if task:
            filepath, duration = task
            try:
                engine = TRANSCRIBE_ENGINE_MODE

                if engine == "random":
                    engine = random.choice(RANDOM_ENGINES)
                elif engine == "alternate":
                    global last_engine_index
                    if not ALTERNATE_ENGINES:
                        log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô alternate_engines ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                        engine = "azure"  # fallback
                    else:
                        last_engine_index = (last_engine_index + 1) % len(ALTERNATE_ENGINES)
                        engine = ALTERNATE_ENGINES[last_engine_index]


                if engine == "assemblyai":
                    log(f"[Worker {worker_id}] üéØ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö AssemblyAI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    transcribe_audio_assemblyai(filepath, duration, engine)
                elif engine == "azure":
                    log(f"[Worker {worker_id}] üéØ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Azure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    transcribe_audio_azure(filepath, duration, engine)
                elif engine == "google":
                    log(f"[Worker {worker_id}] üéØ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Google Cloud ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    transcribe_audio_google(filepath, duration, engine)
                elif engine == "ibm":
                    log(f"[Worker {worker_id}] üéØ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö IBM Cloud ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    transcribe_audio_ibm(filepath, duration, engine)
                elif engine == "speechmatics":
                    log(f"[Worker {worker_id}] üéØ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Speechmatics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    transcribe_audio_speechmatics(filepath, duration, engine)
                else:
                    log(f"[Worker {worker_id}] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '{engine}'")
            except Exception as e:
                log(f"[Worker {worker_id}]‚ùå ERROR: {e}")
        audio_queue.task_done()

def get_source_name(engine_key):
    return {
        "assemblyai": "AssemblyAI",
        "azure": "Azure AI Speech to Text",
        "google": "Google Cloud Speech-to-Text",
        "ibm": "IBM Cloud Watson Speech to Text",
        "speechmatics": "Speechmatics Speech-to-Text",
        "alternate": "‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏±‡∏ô",
        "random": "‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
    }.get(engine_key, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")

# Loop ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
if __name__ == "__main__":
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Control Thread ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢
    threading.Thread(target=control_thread, daemon=True).start()

    log(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö {get_source_name(TRANSCRIBE_ENGINE_MODE)} ‡πÅ‡∏ö‡∏ö real-time (‡πÇ‡∏´‡∏°‡∏î: {TRANSCRIBE_ENGINE_MODE})")

    if TRANSCRIBE_ENGINE_MODE == "alternate":
        log(f"üîÅ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡πÉ‡∏ô alternate mode: {', '.join(ALTERNATE_ENGINES)}")

    if TRANSCRIBE_ENGINE_MODE == "random":
        log(f"üîÅ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô random mode: {', '.join(RANDOM_ENGINES)}")

    print(
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° F ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n"
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° T ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n"
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° S ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n"
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° U ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏£‡∏∞‡∏ö‡∏ö Upload\n"
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° E ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Transcribe\n"
        " - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° A ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏£‡∏∞‡∏ö‡∏ö Audio Pre-processing"
    )

    for i in range(NUM_WORKERS):
        threading.Thread(target=worker, args=(i+1,), daemon=True).start()

    # while True:
        # result = record_until_silent()
        # if result:
            # filepath, duration = result
            # if AUDIO_PRE_PROCESSING:
                # filepath = preprocess_audio(filepath)
            # else:
                # filepath, duration = result
            # audio_queue.put((filepath, duration))
        # time.sleep(0.5)

    def schedule_task(fp, dur):
        # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå preprocess ‡πÅ‡∏•‡πâ‡∏ß enqueue)
        if AUDIO_PRE_PROCESSING:
            fp2 = preprocess_audio(fp)
        else:
            fp2 = fp
        audio_queue.put((fp2, dur))

    while True:
        result = record_until_silent()
        if result:
            fp, dur = result
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å thread ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠
            threading.Thread(
                target=schedule_task,
                args=(fp, dur),
                daemon=True
            ).start()
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏™‡πà sleep ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ loop ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        time.sleep(0.1)
